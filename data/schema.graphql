schema {
  query: Query
}

scalar Email

scalar MobilePhone

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Product {
  id: ID!
  description: String
  code: String
  shop: String
  boxes: [String]
  status: ProductStatusEnumType
  featured: Boolean
  images(size: String): [URL]
  tags: [String]
  price: Int
  salePrice: Int
  weight: Int
  additionalProperties: [ProductAdditionalProperties]
  createdBy: User
  updatedBy: User
}

type ProductAdditionalProperties {
  name: String
  value: String
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]
}

type ProductEdge {
  node: Product
  cursor: String!
}

enum ProductStatusEnumType {
  DRAFT
  AVAILABLE_IN_STORE
  AVAILABLE_IN_ONLINE
  AVAILABLE_IN_ALL
  SUSPENDED
  SOLD
  CLOSED
}

type Query {
  node(id: ID!): Node
  viewer: Viewer
}

scalar URL

type User {
  id: ID!
  name: String
  username: String
  password: String
  isCustomerOnly: Boolean
  email: Email
  emailVerified: Boolean
  mobilePhone: MobilePhone
  mobilePhoneVerified: Boolean
  avatarUrl: URL
  address: String
  district: String
  province: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  node: User
  cursor: String!
}

type Viewer {
  id: ID!
  me: User
  user(id: ID!): User
  users(username: String, after: String, first: Int, before: String, last: Int): UserConnection
  product(id: ID!): Product
  products(code: String, boxes: [String], after: String, first: Int, before: String, last: Int): ProductConnection
}
